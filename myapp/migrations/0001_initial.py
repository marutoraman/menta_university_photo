# Generated by Django 3.1.2 on 2022-01-07 12:37

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import myapp.models
import ulid.api.api


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Major',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('major_name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('university_name', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudentUser',
            fields=[
                ('id', models.CharField(default=ulid.api.api.Api.new, editable=False, max_length=32, primary_key=True, serialize=False)),
                ('major_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='myapp.major')),
                ('university_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='myapp.university')),
            ],
            options={
                'verbose_name': '学生ユーザー',
                'verbose_name_plural': '学生ユーザー',
                'db_table': 'student_user',
            },
        ),
        migrations.AddField(
            model_name='major',
            name='r_university',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='myapp.university'),
        ),
        migrations.CreateModel(
            name='EditUser',
            fields=[
                ('id', models.CharField(default=ulid.api.api.Api.new, editable=False, max_length=32, primary_key=True, serialize=False)),
                ('university_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='myapp.university')),
            ],
            options={
                'verbose_name': 'editユーザー',
                'verbose_name_plural': 'editユーザー',
                'db_table': 'edit_user',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.CharField(default=ulid.api.api.Api.new, editable=False, max_length=32, primary_key=True, serialize=False)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='メールアドレス')),
                ('username', models.CharField(blank=True, max_length=150, verbose_name='ユーザーネーム')),
                ('user_type', models.IntegerField(default=0, verbose_name='ユーザータイプ')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('edit_user', models.ForeignKey(blank=True, db_column='edit_user_id', default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='myapp.edituser')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('student_user', models.ForeignKey(blank=True, db_column='student_user_id', default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='myapp.studentuser')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'ログイン用共通ユーザー',
                'verbose_name_plural': 'ログイン用共通ユーザー',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', myapp.models.CustomUserManager()),
            ],
        ),
    ]
